
* Sentinel-3 (S3) Albedo Processing Pipeline

1. Fetch S3 quicklook products
2. Process with SNAP
   1. Radiance to reflectance
   2. Export as folders of GeoTIFFs
3. Mosaic all scenes in a day to produce one Greenland-wide product

** Fetch S3 OLCI products

1. Fetch quicklook files for a given time period with [[./fetch_ql.sh]].
2. Manually view and filter the quicklook files
3. Download OLCI EFR products with [[./fetch_scene_from_ql.sh]].

** Process with SNAP

This step is a combination of [[./S3_proc.sh]] and [[./S3_proc.xml]].

* Notes
** Misc Code Snippest
*** Fetch all QL scenes
+ June 1 to sep 1 = DOY 152 to 245
+ Fetch scenes in 10 day increments because =./fetch_ql.sh= (actually, Copernicus) only delivers 100 products at a time
#+BEGIN_SRC sh :results verbatim :eval no-export
for day0 in $(seq 152 10 245); do # 15 day increments
    day1=$((day0+15))
    date0=$(gdate --date="2017-01-01 +${day0} days" --iso-8601)
    date1=$(gdate --date="2017-01-01 +${day1} days" --iso-8601)

    ./fetch_ql.sh --start $date0 --stop $date1 -f 62,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 66,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 70,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-35
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-50
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-30
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-50
done
#+END_SRC
*** Fetch some
#+BEGIN_SRC sh :results verbatim :eval no-export
date0=2017-06-01 
date1=2017-06-02
    ./fetch_ql.sh --start $date0 --stop $date1 -f 62,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 66,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 70,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-35
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-50
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-30
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-50

date0=2017-06-15
date1=2017-06-16
    ./fetch_ql.sh --start $date0 --stop $date1 -f 62,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 66,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 70,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-35
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-50
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-30
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-50

date0=2017-07-01 
date1=2017-07-02
    ./fetch_ql.sh --start $date0 --stop $date1 -f 62,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 66,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 70,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-35
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-50
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-30
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-50

date0=2017-07-15
date1=2017-07-16
    ./fetch_ql.sh --start $date0 --stop $date1 -f 62,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 66,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 70,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-35
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-50
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-30
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-50

date0=2017-08-01
date1=2017-08-02
    ./fetch_ql.sh --start $date0 --stop $date1 -f 62,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 66,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 70,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-35
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-50
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-30
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-50

date0=2017-08-15
date1=2017-08-16
    ./fetch_ql.sh --start $date0 --stop $date1 -f 62,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 66,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 70,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-35
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-50
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-30
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-50

date0=2017-09-01
date1=2017-09-02
    ./fetch_ql.sh --start $date0 --stop $date1 -f 62,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 66,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 70,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-35
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-50
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-30
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-50

date0=2017-09-15
date1=2017-09-16
    ./fetch_ql.sh --start $date0 --stop $date1 -f 62,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 66,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 70,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-35
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-50
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-30
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-50

date0=2017-10-01
date1=2017-10-02
    ./fetch_ql.sh --start $date0 --stop $date1 -f 62,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 66,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 70,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-35
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-50
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-30
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-50

date0=2017-10-15
date1=2017-10-16
    ./fetch_ql.sh --start $date0 --stop $date1 -f 62,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 66,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 70,-45
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-35
    ./fetch_ql.sh --start $date0 --stop $date1 -f 76,-50
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-30
    ./fetch_ql.sh --start $date0 --stop $date1 -f 80,-50

#+END_SRC
#+RESULTS:

** Projection 
*** EPSG:3413
#+BEGIN_SRC sh :results verbatim :eval no-export
grass72 -e -c EPSG:3413 ./G3413
grass72 ./G3413/PERMANENT

r.in.gdal input=~/data/Greenland/GIMP/gimpdem0_0_v1.1.tif output=tmp0
r.in.gdal input=~/data/Greenland/GIMP/gimpdem5_5_v1.1.tif output=tmp1
g.region raster=tmp0,tmp1 -p
g.region res=500 -a -p
v.import extent=region input=~/data/GIS/NaturalEarth/ne_10m_admin_0_countries/ne_10m_admin_0_countries.shp  output=countries
d.mon start=wx0
d.vect countries

exit
rm -fR G3413
#+END_SRC
#+RESULTS:

*** From Iceland Email
+ See [[mu4e:msgid:CAMNM-+Hv2tSmCy8r9Gqe3_E89invtzUg1vr0kKTKNbpkhknNTg@mail.gmail.com][Fwd: Glacier work]]
+ proj4 string:
  '+proj=laea +lat_0=90 +lon_0=-100 +x_0=0 +y_0=2200000 +datum=WGS84 +units=km +no_defs'

#+BEGIN_SRC sh :results verbatim :eval no-export
grass72 -c EPSG:4326 ./Gtmp
g.proj proj4='+proj=laea +lat_0=90 +lon_0=-100 +x_0=0 +y_0=2200000 +datum=WGS84 +units=km +no_defs' location=Gsin
g.mapset mapset=PERMANENT location=Gsin

g.region n=1000 s=-3000 e=10000 w=-10000 -pl
v.import extent=region --o input=~/data/GIS/NaturalEarth/ne_10m_admin_0_countries/ne_10m_admin_0_countries.shp  output=countries

d.mon start=wx0
g.region n=100000 s=-100000 e=100000 w=-100000
g.region n=n+100000 s=s-100000 e=e+100000 w=w-100000
d.erase
d.vect countries
d.grid -w 10:0:0
#+END_SRC
#+RESULTS:


** SZA
*** Overlay all
#+BEGIN_SRC sh :results verbatim :eval no-export
grass72 -e -c EPSG:3413 ./G
grass72 ./G/PERMANENT

for item in $(ls tmp); do
    echo $item
    r.in.gdal input=tmp/${item}/SZA.tif output=${item}_SZA --o
done

g.region raster=$(g.list type=raster pattern=*_SZA separator=,)
g.region res=500 -a -p
g.region -s

#v.proj input=countries location=NaturalEarth mapset=10M dbase=~/data/grass --o
v.import extent=region input=~/data/GIS/NaturalEarth/ne_10m_admin_0_countries/ne_10m_admin_0_countries.shp  output=countries

r.colors map=$(g.list type=raster pattern=*_SZA separator=,) color=viridis

d.mon start=png output="./fig/sza_all.png" --overwrite
for raster in $(g.list type=raster pattern=*_SZA); do d.rast $raster; done
d.legend raster=20170801T131738_SZA
d.vect countries where="NAME='Greenland'" fill_color=none
d.mon stop=png
open ./fig/sza_all.png
#+END_SRC
#+RESULTS:

Resulting figure:
#+NAME: fig:SZA_all
#+ATTR_LATEX: :width \textwidth
# #+ATTR_LATEX: :float wrap :placement [23]{l}{0.4\textwidth} :width 0.4\textwidth
#+CAPTION: SZA from multiple scenes overlaid
[[./fig/sza_all.png]]

*** Minimum SZA
#+BEGIN_SRC sh :results verbatim :eval no-export
grass72 ./G/PERMANENT

img_arr=($(g.list type=raster pattern=*_SZA))
imgs=$(g.list type=raster pattern=*_SZA separator=,)

# find the array index with the minimum SZA
r.series input=${imgs} method=min_raster output=SZA_LUT

SZA_LUT_idxs=$(r.stats -n -l SZA_LUT)
n_imgs=$(echo $SZA_LUT_idxs |wc -w)

for i in $SZA_LUT_idxs; do
    echo $i
    r.mask raster=SZA_LUT maskcats=${i} --o --q
    g.region raster=MASK zoom=MASK
    r.mapcalc "tmp_${i} = ${img_arr[${i}]}" --o
done
r.mask -r
g.region -d

tmp_list=$(g.list type=raster pattern=tmp_* separator=,)
r.patch input=${tmp_list} output=SZA_min --o
g.remove -f type=raster pattern=${tmp_list}

d.mon start=png output="./fig/sza_lut.png" --overwrite
d.rast SZA_LUT
d.vect countries where="NAME='Greenland'" fill_color=none
d.mon stop=png
open ./fig/sza_lut.png

d.mon start=wx0
d.mon start=png output="./fig/sza_min.png" --overwrite
d.erase
d.rast SZA_min
d.legend SZA_min
d.vect countries where="NAME='Greenland'" fill_color=none
d.mon stop=png
open ./fig/sza_min.png
#+END_SRC
#+RESULTS:

Resulting figures:
#+NAME: fig:SZA_lut
#+ATTR_LATEX: :width \textwidth
#+CAPTION: Location and scene with minimum SZA
[[./fig/sza_lut.png]]


#+NAME: fig:SZA_min
#+ATTR_LATEX: :width \textwidth
#+CAPTION: Minimum SZA from multiple scenes
[[./fig/sza_min.png]]


*** Mosaic RGB based on Minimum SZA
+ OLCI 468 = BGR

#+BEGIN_SRC sh :results verbatim :eval no-export
grass72 ./G/PERMANENT

# load data
for item in $(ls tmp); do
    echo $item
    r.in.gdal input=tmp/${item}/Oa04_reflectance.tif output=${item}_Oa04_reflectance --o
    r.in.gdal input=tmp/${item}/Oa06_reflectance.tif output=${item}_Oa06_reflectance --o
    r.in.gdal input=tmp/${item}/Oa08_reflectance.tif output=${item}_Oa08_reflectance --o
done

img_arr_Oa04=($(g.list type=raster pattern=*Oa04_reflectance))
img_arr_Oa06=($(g.list type=raster pattern=*Oa06_reflectance))
img_arr_Oa08=($(g.list type=raster pattern=*Oa08_reflectance))


# SZA_LUT_idxs=$(r.stats -n -l SZA_LUT)  # already defined above
# n_imgs=$(echo $SZA_LUT_idxs |wc -w)

for i in $SZA_LUT_idxs; do
    echo $i
    r.mask raster=SZA_LUT maskcats=${i} --o --q
    g.region raster=MASK zoom=MASK
    r.mapcalc "Oa04_tmp_${i} = ${img_arr_Oa04[${i}]}" --o
    r.mapcalc "Oa06_tmp_${i} = ${img_arr_Oa06[${i}]}" --o
    r.mapcalc "Oa08_tmp_${i} = ${img_arr_Oa08[${i}]}" --o
done
r.mask -r
g.region -d

Oa04_tmp_list=$(g.list type=raster pattern=Oa04_tmp_* separator=,)
Oa06_tmp_list=$(g.list type=raster pattern=Oa06_tmp_* separator=,)
Oa08_tmp_list=$(g.list type=raster pattern=Oa08_tmp_* separator=,)
r.patch input=${Oa04_tmp_list} output=Oa04_mosaic --o
r.patch input=${Oa06_tmp_list} output=Oa06_mosaic --o
r.patch input=${Oa08_tmp_list} output=Oa08_mosaic --o
g.remove -f type=raster pattern=${Oa04_tmp_list},${Oa06_tmp_list},${Oa08_tmp_list}


r.colors map=Oa04_mosaic,Oa06_mosaic,Oa08_mosaic color=grey

d.mon start=wx0
d.mon start=png output="./fig/RGB_mosaic.png" --overwrite resolution=3
d.erase
d.rgb blue=Oa04_mosaic green=Oa06_mosaic red=Oa08_mosaic
d.vect countries where="NAME='Greenland'" fill_color=none color=black width=3
d.vect countries where="NAME='Greenland'" fill_color=none color=white width=1
d.mon stop=png
open ./fig/RGB_mosaic.png
#+END_SRC
#+RESULTS:

Resulting figure:
#+NAME: fig:SZA_min
#+ATTR_LATEX: :width \textwidth
#+CAPTION: RGB mosaic based on minimum SZA
[[./fig/RGB_mosaic.png]]

