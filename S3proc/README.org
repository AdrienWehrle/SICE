
* Sentinel-3 (S3) Albedo Processing Pipeline

1. Fetch S3 quicklook products
2. Process with SNAP
   1. Radiance to reflectance and albedo
   2. Export as folders of GeoTIFFs
3. Mosaic all scenes in a day to produce one Greenland-wide product

** Fetch S3 OLCI products

1. Fetch quicklook files for a given time period with [[./fetch_ql.sh]].
2. Manually view and filter the quicklook files
3. Download OLCI EFR products with [[./fetch_scene_from_ql.sh]].

** Process with SNAP

This step is a combination of [[./S3_proc.sh]] and [[./S3_proc.xml]].

* Notes
** SZA
+ These snippets have been implemented as [[./dm.sh]].
*** Overlay all
#+BEGIN_SRC sh :results verbatim :eval no-export
grass72 -e -c EPSG:3413 ./G
grass72 ./G/PERMANENT

for item in $(ls tmp); do
    echo $item
    r.in.gdal input=tmp/${item}/SZA.tif output=${item}_SZA --o
done

g.region raster=$(g.list type=raster pattern=*_SZA separator=,)
g.region res=500 -a -p
g.region -s

#v.proj input=countries location=NaturalEarth mapset=10M dbase=~/data/grass --o
v.import extent=region input=~/data/GIS/NaturalEarth/ne_10m_admin_0_countries/ne_10m_admin_0_countries.shp  output=countries

r.colors map=$(g.list type=raster pattern=*_SZA separator=,) color=viridis

d.mon start=png output="./fig/sza_all.png" --overwrite
for raster in $(g.list type=raster pattern=*_SZA); do d.rast $raster; done
d.legend raster=20170801T131738_SZA
d.vect countries where="NAME='Greenland'" fill_color=none
d.mon stop=png
open ./fig/sza_all.png
#+END_SRC
#+RESULTS:

Resulting figure:
#+NAME: fig:SZA_all
#+ATTR_LATEX: :width \textwidth
# #+ATTR_LATEX: :float wrap :placement [23]{l}{0.4\textwidth} :width 0.4\textwidth
#+CAPTION: SZA from multiple scenes overlaid
[[./fig/sza_all.png]]

*** Minimum SZA
#+BEGIN_SRC sh :results verbatim :eval no-export
grass72 ./G/PERMANENT

img_arr=($(g.list type=raster pattern=*_SZA))
imgs=$(g.list type=raster pattern=*_SZA separator=,)

# find the array index with the minimum SZA
r.series input=${imgs} method=min_raster output=SZA_LUT

SZA_LUT_idxs=$(r.stats -n -l SZA_LUT)
n_imgs=$(echo $SZA_LUT_idxs |wc -w)

for i in $SZA_LUT_idxs; do
    echo $i
    r.mask raster=SZA_LUT maskcats=${i} --o --q
    g.region raster=MASK zoom=MASK
    r.mapcalc "tmp_${i} = ${img_arr[${i}]}" --o
done
r.mask -r
g.region -d

tmp_list=$(g.list type=raster pattern=tmp_* separator=,)
r.patch input=${tmp_list} output=SZA_min --o
g.remove -f type=raster pattern=${tmp_list}

d.mon start=png output="./fig/sza_lut.png" --overwrite
d.rast SZA_LUT
d.vect countries where="NAME='Greenland'" fill_color=none
d.mon stop=png
open ./fig/sza_lut.png

d.mon start=wx0
d.mon start=png output="./fig/sza_min.png" --overwrite
d.erase
d.rast SZA_min
d.legend SZA_min
d.vect countries where="NAME='Greenland'" fill_color=none
d.mon stop=png
open ./fig/sza_min.png
#+END_SRC
#+RESULTS:

Resulting figures:
#+NAME: fig:SZA_lut
#+ATTR_LATEX: :width \textwidth
#+CAPTION: Location and scene with minimum SZA
[[./fig/sza_lut.png]]


#+NAME: fig:SZA_min
#+ATTR_LATEX: :width \textwidth
#+CAPTION: Minimum SZA from multiple scenes
[[./fig/sza_min.png]]


*** Mosaic RGB based on Minimum SZA
+ OLCI 468 = BGR

#+BEGIN_SRC sh :results verbatim :eval no-export
grass72 ./G/PERMANENT

# load data
for item in $(ls tmp); do
    echo $item
    r.in.gdal input=tmp/${item}/Oa04_reflectance.tif output=${item}_Oa04_reflectance --o
    r.in.gdal input=tmp/${item}/Oa06_reflectance.tif output=${item}_Oa06_reflectance --o
    r.in.gdal input=tmp/${item}/Oa08_reflectance.tif output=${item}_Oa08_reflectance --o
done

img_arr_Oa04=($(g.list type=raster pattern=*Oa04_reflectance))
img_arr_Oa06=($(g.list type=raster pattern=*Oa06_reflectance))
img_arr_Oa08=($(g.list type=raster pattern=*Oa08_reflectance))


# SZA_LUT_idxs=$(r.stats -n -l SZA_LUT)  # already defined above
# n_imgs=$(echo $SZA_LUT_idxs |wc -w)

for i in $SZA_LUT_idxs; do
    echo $i
    r.mask raster=SZA_LUT maskcats=${i} --o --q
    g.region raster=MASK zoom=MASK
    r.mapcalc "Oa04_tmp_${i} = ${img_arr_Oa04[${i}]}" --o
    r.mapcalc "Oa06_tmp_${i} = ${img_arr_Oa06[${i}]}" --o
    r.mapcalc "Oa08_tmp_${i} = ${img_arr_Oa08[${i}]}" --o
done
r.mask -r
g.region -d

Oa04_tmp_list=$(g.list type=raster pattern=Oa04_tmp_* separator=,)
Oa06_tmp_list=$(g.list type=raster pattern=Oa06_tmp_* separator=,)
Oa08_tmp_list=$(g.list type=raster pattern=Oa08_tmp_* separator=,)
r.patch input=${Oa04_tmp_list} output=Oa04_mosaic --o
r.patch input=${Oa06_tmp_list} output=Oa06_mosaic --o
r.patch input=${Oa08_tmp_list} output=Oa08_mosaic --o
g.remove -f type=raster pattern=${Oa04_tmp_list},${Oa06_tmp_list},${Oa08_tmp_list}


r.colors map=Oa04_mosaic,Oa06_mosaic,Oa08_mosaic color=grey

d.mon start=wx0
d.mon start=png output="./fig/RGB_mosaic.png" --overwrite resolution=3
d.erase
d.rgb blue=Oa04_mosaic green=Oa06_mosaic red=Oa08_mosaic
d.vect countries where="NAME='Greenland'" fill_color=none color=black width=3
d.vect countries where="NAME='Greenland'" fill_color=none color=white width=1
d.mon stop=png
open ./fig/RGB_mosaic.png
#+END_SRC
#+RESULTS:

Resulting figure:
#+NAME: fig:SZA_min
#+ATTR_LATEX: :width \textwidth
#+CAPTION: RGB mosaic based on minimum SZA
[[./fig/RGB_mosaic.png]]
** Generate ice mask
+ Use the icemask from BedMachine v3
#+BEGIN_SRC sh :results verbatim :eval no-export
grass72 -c EPSG:3413 ./Gtmp
r.in.gdal input=NetCDF:~/data/Greenland/Morlighem_2017/BedMachineGreenland-2017-09-20.nc:mask output=icemask

g.region raster=icemask
g.region res=500 -ap
g.region zoom=icemask

d.mon start=wx0
d.erase
d.rast icemask

r.mapcalc "mask = if(icemask == 4, null(), icemask)" --o
d.rast mask
g.region zoom=mask

r.out.gdal -c -m input=mask output=mask.tif type=Byte createopt=COMPRESS=DEFLATE --o
exit
trash Gtmp
#+END_SRC
#+RESULTS:

** Misc Code Snippest
*** Fetch all QL scenes
#+BEGIN_SRC sh :results verbatim :eval no-export
for d in $(seq 1 365); do
    ./fetch_ql.sh --date 2017-${d}
done
#+END_SRC
*** Fetch JJA
+ June 1 to sep 1 = DOY 152 to 245
#+BEGIN_SRC sh :results verbatim :eval no-export
for d in $(seq 152 245); do
    ./fetch_ql.sh --date 2017-${d}
done
#+END_SRC
* Flowchart

#+BEGIN_SRC dot :file flow.png :cmdline -Kdot -Tpng
digraph {
Source -> Rad2Refl -> Reproject;
Reproject -> "Band 04 Reflectance"
Reproject -> "Band 06 Reflectance"
Reproject -> "Band 08 Reflectance"
Reproject -> "Band 21 Reflectance"
Reproject -> SZA
Reproject -> OZA
Reproject -> SAA
Reproject -> OAA
Reproject -> lon
Reproject -> lat

Source -> OLCISnowProperties -> ReprojectSnowProperties;
ReprojectSnowProperties -> "Grain Diameter"
ReprojectSnowProperties -> "Snow Specific Area"
ReprojectSnowProperties -> NDSI
ReprojectSnowProperties -> "NDSI Mask"
ReprojectSnowProperties -> "Ice Indicator"
ReprojectSnowProperties -> "Albedo BB Planar SW"
ReprojectSnowProperties -> "Albedo Spectral Planar 1020"
}
#+END_SRC

#+RESULTS:
[[file:flow.png]]
* DEBUG
** GPT XML and one scene
#+BEGIN_SRC sh :results verbatim
S3A=./dat_S3A/S3A_OL_1_EFR____20180708T123330_20180708T123630_20180709T172128_0179_033_152_1620_LN1_O_NT_002.SEN3

date
~/local/snap/bin/gpt ./S3_proc.xml -Ssource=${S3A}/xfdumanifest.xml -PtargetFolder=./S3A_DEBUG_out -PBANDSELECT={}
date

date
export LIST="albedo_bb_planar_sw lat lon rBRR_04 reflectance_04"
parallel --progress ~/local/snap/bin/gpt ./S3_proc.xml -q 1 -Ssource=${S3A}/xfdumanifest.xml -PtargetFolder=./S3A_DEBUG_out -PBANDSELECT={} ::: ${LIST}
date

# lite
date
~/local/snap/bin/gpt ./S3_proc_lite.xml -Ssource=${S3A}/xfdumanifest.xml -PtargetFolder=./S3A_DEBUG_out
date

# Everything
~/local/snap/bin/gpt ./S3_proc.xml -Ssource=${S3A}/xfdumanifest.xml -PtargetFolder=./S3A_DEBUG_out
#+END_SRC
#+RESULTS:

** One day
#+BEGIN_SRC sh :results verbatim

# lite
PATH=~/local/snap/bin:$PATH ./S3_proc.sh -i ./dat_S3A -o ./out_S3A -x ./S3_proc_lite.xml

# full
PATH=~/local/snap/bin:$PATH ./S3_proc.sh -i ./dat_S3A -o ./out_S3A -x ./S3_proc.xml


#+END_SRC
#+RESULTS:

** FAIL NaNs due to per-pixel geocoding

*** Version
#+BEGIN_SRC sh :results verbatim drawer
uname -a
~/local/snap/bin/gpt --diag
#+END_SRC
#+RESULTS:
:RESULTS:
Linux geus3064linuxwsm 4.15.0-36-generic #39-Ubuntu SMP Mon Sep 24 16:19:09 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
SNAP Release version 7.0-SNAPSHOT
SNAP home: /home/kdm/local/snap/bin//..
SNAP debug: null
SNAP log level: null
Java home: /home/kdm/local/snap/jre
Java version: 1.8.0_102
Processors: 8
Max memory: 18.7 GB
Cache size: 1024.0 MB
Tile parallelism: 8
Tile size: 512 x 512 pixels

To configure your gpt memory usage:
Edit snap/bin/gpt.vmoptions

To configure your gpt cache size and parallelism:
Edit .snap/etc/snap.properties or gpt -c ${cachesize-in-GB}G -q ${parallelism} 
:END:

*** Prepare a single Sentinel scene

#+BEGIN_SRC sh :results verbatim
wget -nc --continue https://www.dropbox.com/s/tqkku3k3x3d49gw/S3A.zip?dl=1
unzip S3A.zip -d ./DEBUG_in
#+END_SRC
#+RESULTS:

*** Simple GPT XML file

#+BEGIN_SRC xml :tangle DEBUG.xml
<graph id="S3_proc">
  <version>1.0</version>

  <!--
      Write out bands that don't need to go through the OLCI.SnowProcessor
      Should mimic *the same workflow* (reproject, subset, etc.)
  -->

  <node id="Subset">
    <operator>Subset</operator>
    <sources>
      <source>${source}</source>
    </sources>
    <parameters>
      <!-- rough outline of Greenland -->
      <geoRegion>"-54.6 83.2, -75.4 77.5  -67.7 75.5, -61.4 75.4, -53.1 63.5, -48.7 60.5, -45.1 59.5, -42.7 59.6, -38.4 64.4, -21.0 69.9, -15.6 75.0, -14.7 79.9, -9.3 81.4, -25.3 83.7, -54.6 83.20"</geoRegion>
      <!-- <fullSwath>boolean</fullSwath> -->
      <copyMetadata>true</copyMetadata>
    </parameters>
  </node>

  <node id="Reproject">
    <operator>Reproject</operator>
    <sources>
      <source>Subset</source>
    </sources>
    <parameters>
      <crs>EPSG:3413</crs>
      <resampling>Nearest</resampling>
      <noDataValue>NaN</noDataValue>
      <includeTiePointGrids>true</includeTiePointGrids>
    </parameters>
  </node>

  
  <!--
      from here down, pairs:
      1) Select a band
      2) write to disk
  -->
  
  <node id="BandSelect_lat">
    <operator>BandSelect</operator>
    <sources>
      <source>Reproject</source>
    </sources>
    <parameters>
      <sourceBands>latitude</sourceBands>
    </parameters>
  </node>
  <node id="Write_lat">
    <operator>Write</operator>
    <sources>
      <sourceProduct>BandSelect_lat</sourceProduct>
    </sources>
    <parameters>
      <file>${targetFolder}/lat.tif</file>
      <formatName>GeoTIFF</formatName>
    </parameters>
  </node>


  <node id="BandSelect_lon">
    <operator>BandSelect</operator>
    <sources>
      <source>Reproject</source>
    </sources>
    <parameters>
      <sourceBands>longitude</sourceBands>
    </parameters>
  </node>
  <node id="Write_lon">
    <operator>Write</operator>
    <sources>
      <sourceProduct>BandSelect_lon</sourceProduct>
    </sources>
    <parameters>
      <file>${targetFolder}/lon.tif</file>
      <formatName>GeoTIFF</formatName>
    </parameters>
  </node>
  

  <node id="SZA_invalid">
    <operator>BandMaths</operator>
    <sources>
      <sourceProducts>Reproject</sourceProducts>
    </sources>
    <parameters>
      <targetBands>
        <targetBand>
          <name>sun_zenith</name>
          <type>float32</type>
          <expression>quality_flags.invalid ? NaN : SZA</expression>
        </targetBand>
      </targetBands>
    </parameters>
  </node>

  <node id="BandSelect_SZA">
    <operator>BandSelect</operator>
    <sources>
      <source>SZA_invalid</source>
    </sources>
    <parameters>
      <sourceBands>sun_zenith</sourceBands>
    </parameters>
  </node>
  <node id="Write_SZA">
    <operator>Write</operator>
    <sources>
      <sourceProduct>BandSelect_SZA</sourceProduct>
    </sources>
    <parameters>
      <file>${targetFolder}/SZA_x.tif</file>
      <formatName>GeoTIFF</formatName>
    </parameters>
  </node>

  <node id="BandSelect_OZA">
    <operator>BandSelect</operator>
    <sources>
      <source>Reproject</source>
    </sources>
    <parameters>
      <sourceBands>OZA</sourceBands>
    </parameters>
  </node>
  <node id="Write_OZA">
    <operator>Write</operator>
    <sources>
      <sourceProduct>BandSelect_OZA</sourceProduct>
    </sources>
    <parameters>
      <file>${targetFolder}/OZA_x.tif</file>
      <formatName>GeoTIFF</formatName>
    </parameters>
  </node>


  <node id="BandSelect_SAA">
    <operator>BandSelect</operator>
    <sources>
      <source>Reproject</source>
    </sources>
    <parameters>
      <sourceBands>SAA</sourceBands>
    </parameters>
  </node>
  <node id="Write_SAA">
    <operator>Write</operator>
    <sources>
      <sourceProduct>BandSelect_SAA</sourceProduct>
    </sources>
    <parameters>
      <file>${targetFolder}/SAA_x.tif</file>
      <formatName>GeoTIFF</formatName>
    </parameters>
  </node>

  <node id="BandSelect_OAA">
    <operator>BandSelect</operator>
    <sources>
      <source>Reproject</source>
    </sources>
    <parameters>
      <sourceBands>OAA</sourceBands>
    </parameters>
  </node>
  <node id="Write_OAA">
    <operator>Write</operator>
    <sources>
      <sourceProduct>BandSelect_OAA</sourceProduct>
    </sources>
    <parameters>
      <file>${targetFolder}/OAA_x.tif</file>
      <formatName>GeoTIFF</formatName>
    </parameters>
  </node>
  
</graph>
#+END_SRC

*** Run GPT w/ and w/o per-pixel geocoding

#+BEGIN_SRC sh :results verbatim
DIR=$(ls DEBUG_in)

time ~/local/snap/bin/gpt ./DEBUG.xml -Ssource=./DEBUG_in/${DIR}/xfdumanifest.xml -PtargetFolder=./DEBUG_nopixel -Ds3tbx.reader.olci.pixelGeoCoding=false

time ~/local/snap/bin/gpt ./DEBUG.xml -Ssource=./DEBUG_in/${DIR}/xfdumanifest.xml -PtargetFolder=./DEBUG_pixel -Ds3tbx.reader.olci.pixelGeoCoding=true
#+END_SRC
#+RESULTS:

** Find folders with bad files
#+BEGIN_SRC sh :results verbatim
for folder in $(ls); do
  echo "Checking ${folder}"
  ls ${folder} | parallel gdalinfo -mm ${folder}/{} > /dev/null
done
#+END_SRC
#+RESULTS:


** Failed days on OS X laptop run x2

*** kdm
20180601T151719
20180602T162908
20180602T181007

*** kdm2

20180601T133620
20180601T151719
20180601T165519
20180602T162908
20180602T181007

*** kdm3

20180601T151719
20180601T165519
20180602T162908
20180602T181007

*** kdm4

Only simple SZA no SnowProcessor

20180601T151719
20180601T165519

* Runner

187G /Volumes/Ice/Sentinel-3/_zip/201705
190G /Volumes/Ice/Sentinel-3/_zip/201706
186G /Volumes/Ice/Sentinel-3/_zip/201707
182G /Volumes/Ice/Sentinel-3/_zip/201708
186G /Volumes/Ice/Sentinel-3/_zip/201805
188G /Volumes/Ice/Sentinel-3/_zip/201806
181G /Volumes/Ice/Sentinel-3/_zip/201807
 27G /Volumes/Ice/Sentinel-3/_zip/201808

#+BEGIN_SRC sh :results verbatim
./S3_proc.sh -i /media/kdm/ice/Sentinel-3/_zip/201705 -o /media/kdm/ice/Ken/S3Snow/tmp -v
done
#+END_SRC
* Docker

https://github.com/edwardpmorris/docker-snap
#+BEGIN_SRC sh :results verbatim
docker pull epmorris/debian8-snap2:s3tbx
#+END_SRC
#+RESULTS:
